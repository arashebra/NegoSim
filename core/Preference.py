#######################################################
# 
# Preference.py
# Python implementation of the Class Preference
# Generated by Enterprise Architect
# Created on:
# Original author: Arash Ebrahimnezhad
# 
#######################################################
import controller


class Preference:
    """
    preference has its own data structure and when an object asks preference, it returns that specific data structure.
    In the following there is an example:
    preference = {
        'Brand': [0.45, {'Lenovo': 10, 'Assus': 20, 'Mac': 30}],
        'Monitor': [0.18, {'15': 30, '10': 25, '11': 20}],
        'HDD': [0.38, {'1T': 25, '2T': 32, '3T': 35}]
    }
    """

    def __init__(self, domain_name: str, xml_file_name: str):
        """
        preference_data_structure = {
            'Brand': [0.45, {'Lenovo': 10, 'Assus': 20, 'Mac': 30}],
            'Monitor': [0.18, {'15': 30, '10': 25, '11': 20}],
            'HDD': [0.38, {'1T': 25, '2T': 32, '3T': 35}]
        }
        :param domain_name:
        :param preference_name:
        """
        if not isinstance(domain_name, str):
            raise TypeError('domain_name argument must be a string')
        if not isinstance(xml_file_name, str):
            raise TypeError('xml_file_name argument must be a string')

        self.__domain_name = domain_name
        self.__xml_file_name = xml_file_name

        my_controler = controller.Controller()
        self.__preference_data_structure = my_controler.fetch_preference_data_structure(domain_name, xml_file_name)

    def get_preference_data_structure(self):
        return self.__preference_data_structure

    def get_issue_weight(self, issue: str):
        return self.__preference_data_structure[issue][0]

    def get_issue_item_value(self, issue: str, item: str):
        """
        :param item:
        :param issue: str
        :return: value, max_value
        """
        if not isinstance(issue, str):
            raise TypeError('issue argument must be an instance of string')
        if not isinstance(item, str):
            raise TypeError('item argument must be an instance of string')
        item_value_dict = self.__preference_data_structure[issue][1]
        max_value = max(float(x) for x in item_value_dict.values())
        return float(item_value_dict[item]), max_value

    def __copy__(self):
        new_instance = Preference(self.__domain_name, self.__xml_file_name)
        return new_instance

    def __repr__(self):
        s = '{'
        for issue, weight_item_value in self.__preference_data_structure.items():
            s += issue
            s += ': ['
            s += str(weight_item_value[0])
            s += ', {'
            for item, value in (weight_item_value[1]).items():
                s += str(item)
                s += ': '
                s += str(value)
                s += ', '
            s += '}, '
            s += '] '
        s += '}'
        return s
